generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Sucursal representa cada local físico o virtual de la óptica.
/// Incluye datos de contacto, geolocalización y ciclo de vida.
model Sucursal {
  id            String    @id @default(uuid())      // Clave primaria UUID
  nombre        String                                // Nombre de la sucursal (obligatorio)
  direccion     String?                               // Dirección física (opcional)
  latitud       Float?                                // Latitud (opcional)
  longitud      Float?                                // Longitud (opcional)
  telefono      String?                               // Teléfono de contacto (opcional)
  email         String?                               // Correo de la sucursal (opcional)
  estado        Boolean   @default(true)              // Estado (activo/inactivo)
  creado_en     DateTime  @default(now())             // Fecha de creación
  actualizado_en DateTime?                            // Fecha de última actualización
  anulado_en    DateTime?                             // Fecha de anulación
  anulado_por   String?                               // (FK a Usuario) Usuario que anuló

  // Relaciones (se agregan después, cuando estén definidos los otros modelos)
  // inventarios      Inventario[]
  // usuarios         Usuario[] @relation("SucursalUsuarios")
  // citas            Cita[]
  // pedidos          Pedido[]
  // descansos        DescansoEmpleado[]
  // movimientosContables MovimientoContable[]
  // pagos            Pago[]
  // gastos           Gasto[]
  // transferenciaStockOrigens      TransferenciaStock[] @relation("SucursalOrigen")
  // transferenciaStockDestinos     TransferenciaStock[] @relation("SucursalDestino")
}

/// Usuarios de la plataforma: clientes y empleados.
/// Incluye autenticación, control de ciclo de vida y datos extendidos.
model Usuario {
  id             String    @id @default(uuid())
  nombre_completo String
  email          String    @unique
  telefono       String?
  dni            String?   @unique
  foto_perfil    String?
  direccion      String?
  latitud        Float?
  longitud       Float?
  google_uid     String?
  facebook_uid   String?
  activo         Boolean   @default(true)
  creado_en      DateTime  @default(now())
  actualizado_en DateTime?
  anulado_en     DateTime?
  anulado_por    String?   // FK a Usuario (puedes modelar relación opcional a Usuario si quieres)
  erp_id         Int?
  erp_tipo       String?

  // Relaciones
  roles              UsuarioRol[]
  movimientosInv     MovimientoInventario[]
  transferenciasSolicitadas  TransferenciaStock[] @relation("SolicitadoPor")
  transferenciasRevisadas    TransferenciaStock[] @relation("RevisadoPor")
  citasCliente       Cita[]  @relation("CitasCliente")
  citasOptometrista  Cita[]  @relation("CitasOptometrista")
  historialesCliente HistorialClinico[] @relation("HistorialCliente")
  historialesOptometrista HistorialClinico[] @relation("HistorialOptometrista")
  archivosSubidos    ArchivoAdjunto[] @relation("ArchivosSubidosPor")
  descansos          DescansoEmpleado[]
  pedidos            Pedido[]        @relation("PedidosCliente")
  pedidosAnulados    Pedido[]        @relation("PedidosAnuladosPor")
  movimientosContables MovimientoContable[]
  pagos              Pago[]
  gastos             Gasto[]
  logsAcceso         LogAcceso[]
  logsAuditoria      LogAuditoria[]
  logsEnvioCorreo    LogEnvioCorreo[] @relation("EnvioPor")
}

/// Roles del sistema: admin, optometrista, vendedor, etc.
model Rol {
  id        String    @id @default(uuid())
  nombre    String    @unique
  descripcion String?
  usuarios  UsuarioRol[]
}

/// Relación N:M entre usuario y rol (soporta multirol y permite agregar metadatos si se requiere).
model UsuarioRol {
  id        String   @id @default(uuid())
  usuario   Usuario  @relation(fields: [usuario_id], references: [id])
  usuario_id String
  rol       Rol      @relation(fields: [rol_id], references: [id])
  rol_id    String
  creado_en DateTime @default(now())
  @@unique([usuario_id, rol_id])
}
