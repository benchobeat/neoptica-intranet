import { Router } from 'express';
import type { Request, Response } from 'express';
import {
  crearProducto,
  listarProductos,
  obtenerProductoPorId,
  actualizarProducto,
  eliminarProducto,
} from '@/controllers/productoController';
import { authenticateJWT } from '@/middlewares/auth';
import { requireRole } from '@/middlewares/roles';
import { validateRequest } from '@/middlewares/validate';
import { body, param, query } from 'express-validator';

const router = Router();

// Validaciones
const validarCrearProducto = [
  body('nombre').trim().isLength({ min: 3 }).withMessage('El nombre debe tener al menos 3 caracteres'),
  body('precio').isFloat({ gt: 0 }).withMessage('El precio debe ser mayor a 0'),
  body('categoria').trim().notEmpty().withMessage('La categoría es requerida'),
  body('descripcion').optional().trim(),
  body('imagen_url').optional().isURL().withMessage('La URL de la imagen no es válida'),
  body('modelo_3d_url').optional().isURL().withMessage('La URL del modelo 3D no es válida'),
  body('activo').optional().isBoolean().withMessage('El campo activo debe ser un valor booleano'),
];

const validarActualizarProducto = [
  param('id').isString().isLength({ min: 10 }).withMessage('ID de producto inválido'),
  body('nombre').optional().trim().isLength({ min: 3 }).withMessage('El nombre debe tener al menos 3 caracteres'),
  body('precio').optional().isFloat({ gt: 0 }).withMessage('El precio debe ser mayor a 0'),
  body('categoria').optional().trim().notEmpty().withMessage('La categoría no puede estar vacía'),
  body('descripcion').optional().trim(),
  body('imagen_url').optional().isURL().withMessage('La URL de la imagen no es válida'),
  body('modelo_3d_url').optional().isURL().withMessage('La URL del modelo 3D no es válida'),
  body('activo').optional().isBoolean().withMessage('El campo activo debe ser un valor booleano'),
];

const validarObtenerProducto = [
  param('id').isString().isLength({ min: 10 }).withMessage('ID de producto inválido')
];

const validarEliminarProducto = [
  param('id').isString().isLength({ min: 10 }).withMessage('ID de producto inválido')
];

// Tipos para documentación Swagger
/**
 * @swagger
 * components:
 *   schemas:
 *     Producto:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           format: uuid
 *           example: 123e4567-e89b-12d3-a456-426614174000
 *         nombre:
 *           type: string
 *           example: "Lentes de Sol Premium"
 *         descripcion:
 *           type: string
 *           example: "Lentes polarizados con protección UV 400"
 *         precio:
 *           type: number
 *           format: double
 *           example: 149.99
 *         categoria:
 *           type: string
 *           example: "Accesorios"
 *         imagen_url:
 *           type: string
 *           format: uri
 *           example: "https://example.com/images/lentes-sol-premium.jpg"
 *         modelo_3d_url:
 *           type: string
 *           format: uri
 *           example: "https://example.com/models/lentes-sol-premium.glb"
 *         activo:
 *           type: boolean
 *           example: true
 *         creado_en:
 *           type: string
 *           format: date-time
 *           example: "2023-05-15T10:30:00Z"
 *         modificado_en:
 *           type: string
 *           format: date-time
 *           example: "2023-05-16T15:45:00Z"
 * 
 *     ErrorResponse:
 *       type: object
 *       properties:
 *         ok:
 *           type: boolean
 *           example: false
 *         error:
 *           type: string
 *           example: "Mensaje de error descriptivo"
 * 
 *     PaginatedResponse:
 *       type: object
 *       properties:
 *         ok:
 *           type: boolean
 *           example: true
 *         data:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Producto'
 *         meta:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *               example: 1
 *             pagina:
 *               type: integer
 *               example: 1
 *             limite:
 *               type: integer
 *               example: 10
 *             totalPaginas:
 *               type: integer
 *               example: 1
 * 
 *     ProductoInput:
 *       type: object
 *       required:
 *         - nombre
 *         - precio
 *         - categoria
 *       properties:
 *         nombre:
 *           type: string
 *           minLength: 3
 *           example: "Lentes de Sol"
 *         descripcion:
 *           type: string
 *           example: "Lentes polarizados con filtro UV"
 *         precio:
 *           type: number
 *           minimum: 0
 *           example: 49.99
 *         categoria:
 *           type: string
 *           example: "Accesorios"
 *         imagen_url:
 *           type: string
 *           format: uri
 *           example: "https://example.com/lentes.jpg"
 *         modelo_3d_url:
 *           type: string
 *           format: uri
 *           example: "https://example.com/lentes-3d.glb"
 *         activo:
 *           type: boolean
 *           example: true
 */

/**
 * @swagger
 * /api/productos:
 *   get:
 *     summary: Obtiene una lista paginada de productos
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número de página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 10
 *         description: Cantidad de elementos por página
 *       - in: query
 *         name: q
 *         schema:
 *           type: string
 *         description: Término de búsqueda para filtrar productos
 *       - in: query
 *         name: categoria
 *         schema:
 *           type: string
 *         description: Filtrar por categoría
 *       - in: query
 *         name: soloActivos
 *         schema:
 *           type: boolean
 *           default: true
 *         description: Filtrar solo productos activos
 *       - in: query
 *         name: ordenarPor
 *         schema:
 *           type: string
 *           enum: [nombre, precio, categoria, creado_en, actualizado_en]
 *           default: nombre
 *         description: Campo por el cual ordenar los resultados
 *       - in: query
 *         name: orden
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: asc
 *         description: Orden de los resultados (ascendente o descendente)
 *     responses:
 *       200:
 *         description: Lista paginada de productos
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/PaginatedResponse'
 *       400:
 *         description: Parámetros de consulta inválidos
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       401:
 *         description: No autorizado - Token no proporcionado o inválido
 *       403:
 *         description: No tiene permisos para realizar esta acción
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */
// Rutas públicas
router.get('/', listarProductos);

// Rutas protegidas que requieren autenticación
router.use(authenticateJWT);

/**
 * @swagger
 * /api/productos:
 *   post:
 *     summary: Crea un nuevo producto
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ProductoInput'
 *     responses:
 *       201:
 *         description: Producto creado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *       400:
 *         description: Datos de entrada inválidos
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       401:
 *         description: No autorizado - Token no proporcionado o inválido
 *       403:
 *         description: No tiene permisos para realizar esta acción
 *       409:
 *         description: Conflicto - Ya existe un producto con ese nombre
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */
router.post('/', requireRole(['admin', 'inventario']), validarCrearProducto, validateRequest, crearProducto);

/**
 * @swagger
 * /api/productos/{id}:
 *   get:
 *     summary: Obtiene un producto por su ID
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID del producto
 *     responses:
 *       200:
 *         description: Detalles del producto
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *       400:
 *         description: ID de producto inválido
 *       404:
 *         description: Producto no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.get('/:id', validarObtenerProducto, validateRequest, obtenerProductoPorId);

/**
 * @swagger
 * /api/productos/{id}:
 *   put:
 *     summary: Actualiza un producto existente
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID del producto a actualizar
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ProductoInput'
 *     responses:
 *       200:
 *         description: Producto actualizado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *       400:
 *         description: Datos de entrada inválidos
 *       401:
 *         description: No autorizado - Token no proporcionado o inválido
 *       403:
 *         description: No tiene permisos para realizar esta acción
 *       404:
 *         description: Producto no encontrado
 *       409:
 *         description: Conflicto - Ya existe un producto con ese nombre
 *       500:
 *         description: Error interno del servidor
 */
import { validarActualizarProducto } from './productos.validators';
import { actualizarProducto } from './productos.controller';

router.put('/:id', requireRole(['admin', 'inventario']), validarActualizarProducto, validateRequest, actualizarProducto);

/**
 * @swagger
 * /api/productos/{id}:
 *   delete:
 *     summary: Elimina un producto (soft delete)
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID del producto a eliminar
 *     responses:
 *       200:
 *         description: Producto eliminado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *       400:
 *         description: ID de producto inválido o producto ya eliminado
 *       401:
 *         description: No autorizado - Token no proporcionado o inválido
 *       403:
 *         description: No tiene permisos para realizar esta acción
 *       404:
 *         description: Producto no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.delete('/:id', 
  requireRole(['admin', 'inventario']), 
  validarEliminarProducto, 
  validateRequest, 
  (req: Request<{id: string}>, res: Response) => eliminarProducto(req as Request<{id: string}>, res)
);

/**
 * @swagger
 * /api/productos:
 *   post:
 *     summary: Crea un nuevo producto
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               nombre:
 *                 type: string
 *                 example: Lentes de Sol
 *               descripcion:
 *                 type: string
 *                 example: Lentes de sol polarizados
 *               precio:
 *                 type: number
 *                 example: 49.99
 *               categoria:
 *                 type: string
 *                 example: Accesorios
 *               imagen_url:
 *                 type: string
 *                 example: https://example.com/lentes.jpg
 *               modelo_3d_url:
 *                 type: string
 *                 example: https://example.com/lentes-3d.glb
 *               activo:
 *                 type: boolean
 *                 example: true
 *     responses:
 *       201:
 *         description: Producto creado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *                 error:
 *                   type: string
 *                   example: null
 *       400:
 *         description: Error de validación
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.post('/', authenticateJWT, requireRole('admin', 'vendedor', 'optometrista'), crearProducto);

/**
 * @swagger
 * /api/productos/{id}:
 *   get:
 *     summary: Obtiene un producto por ID
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID del producto
 *     responses:
 *       200:
 *         description: Producto encontrado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *                 error:
 *                   type: string
 *                   example: null
 *       404:
 *         description: Producto no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.get('/:id', authenticateJWT, obtenerProductoPorId);

/**
 * @swagger
 * /api/productos/{id}:
 *   put:
 *     summary: Actualiza un producto existente
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID del producto
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ProductoInput'
 *     responses:
 *       200:
 *         description: Producto actualizado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/Producto'
 *                 error:
 *                   type: string
 *                   example: null
 *       400:
 *         description: Datos inválidos
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Producto no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.put(
  '/:id',
  authenticateJWT,
  requireRole('admin', 'vendedor', 'optometrista'),
  actualizarProducto
);

/**
 * @swagger
 * /api/productos/{id}:
 *   delete:
 *     summary: Elimina (borrado lógico) un producto
 *     tags: [Productos]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID del producto
 *     responses:
 *       200:
 *         description: Producto eliminado correctamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: string
 *                   example: 'Producto eliminado'
 *                 error:
 *                   type: string
 *                   example: null
 *       404:
 *         description: Producto no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.delete('/:id', authenticateJWT, requireRole('admin'), eliminarProducto);

export default router;
