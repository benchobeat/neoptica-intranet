openapi: 3.0.0
info:
  title: API de Neóptica
  description: |
    Documentación de la API REST para el sistema de gestión de Neóptica.
    
    ## Autenticación
    
    La API usa autenticación JWT (JSON Web Tokens).
    
    1. Obtén un token con `/api/auth/login`
    2. Inclúyelo en el header `Authorization: Bearer {token}`
    
  version: 1.0.0
  contact:
    name: Soporte Técnico
    email: soporte@neoptica.com
    url: https://neoptica.com/soporte

servers:
  - url: https://api.neoptica.com/v1
    description: Producción
  - url: https://staging-api.neoptica.com/v1
    description: Staging
  - url: http://localhost:3000/api
    description: Desarrollo local

# Esquemas comunes (reutilizables)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        **Formato:** `Bearer {token}`
        
        Ejemplo:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

  schemas:
    # Respuesta de error estándar
    Error:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Parámetros de entrada inválidos"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Debe ser una dirección de correo válida"

    # Esquema de paginación
    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 10

    # Esquema de metadatos para respuestas paginadas
    Metadata:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        filters:
          type: object
          additionalProperties: true

    # Ejemplo de esquema de recurso
    Usuario:
      type: object
      required:
        - id
        - nombre
        - email
        - rol
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        nombre:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan.perez@ejemplo.com"
        rol:
          type: string
          enum: [admin, optometrista, vendedor, almacen]
          example: "vendedor"
        telefono:
          type: string
          nullable: true
          example: "+521234567890"
        activo:
          type: boolean
          default: true
        fechaCreacion:
          type: string
          format: date-time
          example: "2025-01-01T12:00:00Z"
        fechaActualizacion:
          type: string
          format: date-time
          example: "2025-01-02T10:30:00Z"

    # Esquema para creación/actualización
    UsuarioInput:
      type: object
      required:
        - nombre
        - email
        - rol
      properties:
        nombre:
          type: string
          minLength: 3
          maxLength: 100
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan.perez@ejemplo.com"
        rol:
          type: string
          enum: [admin, optometrista, vendedor, almacen]
          example: "vendedor"
        telefono:
          type: string
          nullable: true
          example: "+521234567890"
        password:
          type: string
          minLength: 8
          format: password
          writeOnly: true
          example: "miclaveSegura123"

# Rutas de la API
paths:
  # Autenticación
  /auth/login:
    post:
      tags: [Autenticación]
      summary: Iniciar sesión
      description: Autentica un usuario y devuelve un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@neoptica.com"
                password:
                  type: string
                  format: password
                  example: "admin123"
      responses:
        '200':
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  usuario:
                    $ref: '#/components/schemas/Usuario'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                statusCode: 401
                error: "Unauthorized"
                message: "Credenciales inválidas"

  # Usuarios
  /usuarios:
    get:
      tags: [Usuarios]
      summary: Listar usuarios
      description: Obtiene una lista paginada de usuarios
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - name: nombre
          in: query
          description: Filtrar por nombre (búsqueda parcial)
          required: false
          schema:
            type: string
        - name: rol
          in: query
          description: Filtrar por rol
          required: false
          schema:
            type: string
            enum: [admin, optometrista, vendedor, almacen]
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Usuario'
                  meta:
                    $ref: '#/components/schemas/Metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags: [Usuarios]
      summary: Crear usuario
      description: Crea un nuevo usuario en el sistema
      security:
        - bearerAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: Conflicto (ej. email ya registrado)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /usuarios/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID del usuario
        schema:
          type: string
          format: uuid
    get:
      tags: [Usuarios]
      summary: Obtener usuario por ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Detalles del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    put:
      tags: [Usuarios]
      summary: Actualizar usuario
      security:
        - bearerAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
    
    delete:
      tags: [Usuarios]
      summary: Eliminar usuario (soft delete)
      security:
        - bearerAuth: [admin]
      responses:
        '204':
          description: Usuario eliminado exitosamente
        '404':
          $ref: '#/components/responses/NotFoundError'

# Definiciones reutilizables (parámetros, respuestas, etc.)
components:
  parameters:
    pageParam:
      name: page
      in: query
      description: Número de página
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    limitParam:
      name: limit
      in: query
      description: Cantidad de resultados por página (máx. 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
  
  responses:
    BadRequestError:
      description: Solicitud incorrecta
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: No autenticado o token inválido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: No tiene permisos para realizar esta acción
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

# Configuración de seguridad por defecto
security:
  - bearerAuth: []

# Tags para agrupar operaciones
tags:
  - name: Autenticación
    description: Operaciones de autenticación
  - name: Usuarios
    description: Gestión de usuarios
  - name: Productos
    description: Catálogo de productos
  - name: Ventas
    description: Procesos de venta
  - name: Clientes
    description: Gestión de clientes
  - name: Citas
    description: Gestión de citas
  - name: Inventario
    description: Control de inventario
  - name: Reportes
    description: Reportes y estadísticas
