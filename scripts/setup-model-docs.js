#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Directorio base para la documentaci√≥n
const DOCS_BASE_DIR = path.join(__dirname, '../docs/modelos');

// Plantillas para los archivos de documentaci√≥n
const TEMPLATES = {
  reglas_negocio: `# Reglas de Negocio - {{modelName}}

## Validaciones de Datos

| Campo | Tipo | Requerido | Validaciones |
|-------|------|-----------|--------------|
| campo1 | tipo | S√≠/No     | - Validaci√≥n 1<br>- Validaci√≥n 2 |

## Reglas de Negocio Espec√≠ficas

1. **Regla 1**: Descripci√≥n detallada de la regla de negocio
   - **Condici√≥n**: Cu√°ndo se aplica
   - **Acci√≥n**: Qu√© acci√≥n se realiza
   - **Ejemplo**: Ejemplo de aplicaci√≥n

2. **Regla 2**: Otra regla de negocio importante
   - **Condici√≥n**: Cu√°ndo se aplica
   - **Acci√≥n**: Qu√© acci√≥n se realiza
   - **Ejemplo**: Ejemplo de aplicaci√≥n

## Flujos de Trabajo

### Creaci√≥n
1. Paso 1
2. Paso 2
3. Paso 3

### Actualizaci√≥n
1. Paso 1
2. Paso 2

### Eliminaci√≥n
1. Paso 1
2. Confirmaci√≥n
`,

  seguridad: `# Seguridad y Permisos - {{modelName}}

## Roles y Permisos

| Rol | Crear | Leer | Actualizar | Eliminar | Notas |
|-----|-------|------|------------|----------|-------|
| Administrador | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | Acceso completo |
| Usuario Est√°ndar | ‚ùå | ‚úÖ | ‚ùå | ‚ùå | Solo lectura |

## Pol√≠ticas de Seguridad

### Control de Acceso
- **Nivel de Acceso**: P√∫blico/Autenticado/Privado
- **Restricciones de Visibilidad**: Qu√© usuarios pueden ver estos datos
- **Restricciones de Modificaci√≥n**: Qui√©n puede modificar estos datos

### Validaciones de Seguridad
- Validaci√≥n 1
- Validaci√≥n 2

## Auditor√≠a
- **Registro de Accesos**: Se registran todos los accesos
- **Historial de Cambios**: Se mantiene un historial completo
- **Retenci√≥n**: Per√≠odo de retenci√≥n de registros
`
};

// Obtener la lista de modelos desde el esquema Prisma
function getPrismaModels() {
  try {
    // Leer el esquema Prisma
    const schemaPath = path.join(__dirname, '../backend/prisma/schema.prisma');
    const schemaContent = fs.readFileSync(schemaPath, 'utf-8');
    
    // Extraer nombres de modelos (l√≠neas que empiezan con 'model')
    const modelRegex = /^model\s+(\w+)/gm;
    const models = [];
    let match;
    
    while ((match = modelRegex.exec(schemaContent)) !== null) {
      models.push(match[1]);
    }
    
    return models;
  } catch (error) {
    console.error('Error al leer el esquema de Prisma:', error);
    console.error('Aseg√∫rate de que el archivo schema.prisma existe en la ruta correcta.');
    process.exit(1);
  }
}

// Crear directorios y archivos de documentaci√≥n para un modelo
function setupModelDocs(modelName) {
  const modelDir = path.join(DOCS_BASE_DIR, modelName.toLowerCase());
  
  // Crear directorio del modelo si no existe
  if (!fs.existsSync(modelDir)) {
    fs.mkdirSync(modelDir, { recursive: true });
    console.log(`‚úÖ Directorio creado: ${modelDir}`);
  }
  
  // Crear archivos de documentaci√≥n
  Object.entries(TEMPLATES).forEach(([templateName, templateContent]) => {
    const filePath = path.join(modelDir, `${templateName}.md`);
    
    // Solo crear el archivo si no existe
    if (!fs.existsSync(filePath)) {
      const content = templateContent.replace(/\{\{modelName\}\}/g, modelName);
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ Archivo creado: ${filePath}`);
    } else {
      console.log(`‚ÑπÔ∏è  El archivo ya existe: ${filePath}`);
    }
  });
  
  // Crear README.md si no existe
  const readmePath = path.join(modelDir, 'README.md');
  if (!fs.existsSync(readmePath)) {
    const readmeContent = `# ${modelName}

## Descripci√≥n

Breve descripci√≥n del modelo ${modelName}.

## Documentaci√≥n T√©cnica

- [Documentaci√≥n Generada](../_generated/${modelName.toLowerCase()}.md) - Estructura de la base de datos, campos y relaciones
- [Reglas de Negocio](./reglas_negocio.md) - Reglas de negocio y validaciones
- [Seguridad y Permisos](./seguridad.md) - Roles, permisos y pol√≠ticas de seguridad

## Flujos Principales

- [Flujo 1](./flujos/flujo1.md)
- [Flujo 2](./flujos/flujo2.md)

## Integraciones

- [Integraci√≥n 1](./integraciones/integracion1.md)
- [Integraci√≥n 2](./integraciones/integracion2.md)
`;
    fs.writeFileSync(readmePath, readmeContent);
    console.log(`‚úÖ README.md creado: ${readmePath}`);
  }
  
  // Crear directorios adicionales
  const subdirs = ['flujos', 'integraciones', 'diagramas'];
  subdirs.forEach(subdir => {
    const dirPath = path.join(modelDir, subdir);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ Directorio creado: ${dirPath}`);
      
      // Agregar archivo .gitkeep para mantener la estructura de directorios
      fs.writeFileSync(path.join(dirPath, '.gitkeep'), '');
    }
  });
}

// Funci√≥n principal
async function main() {
  try {
    console.log('üîç Obteniendo modelos de Prisma...');
    const models = await getPrismaModels();
    
    console.log(`üìù Configurando documentaci√≥n para ${models.length} modelos...`);
    
    // Configurar documentaci√≥n para cada modelo
    for (const model of models) {
      console.log(`\nüìã Procesando modelo: ${model}`);
      setupModelDocs(model);
    }
    
    console.log('\nüéâ Configuraci√≥n de documentaci√≥n completada con √©xito!');
  } catch (error) {
    console.error('‚ùå Error durante la configuraci√≥n de la documentaci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar el script
main();
